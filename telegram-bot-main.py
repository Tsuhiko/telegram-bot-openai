import telethon
from telethon.tl.custom import Button
from telethon import TelegramClient, events

import asyncio
import config
import openai

openai.api_key = config.openai_key  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î –∫–ª—é—á OpenAI API –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ–π–Ω–æ–≥–æ —Ñ–∞–π–ª—É

client = TelegramClient(config.session_name_bot, config.API_ID, config.API_HASH).start(bot_token=config.BOT_TOKEN)  # –ü—ñ–¥–∫–ª—é—á–∞—î–º–æ—Å—è –¥–æ Telegram –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é Telethon

keyboard_stop = [[Button.inline("–ó—É–ø–∏–Ω–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É", b"stop")]]  # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è –∑—É–ø–∏–Ω–∫–∏ —Ä–æ–∑–º–æ–≤–∏

async def send_question_and_retrieve_result(prompt, conv, keyboard):

    message = await conv.send_message(prompt, buttons=keyboard)  # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–ø–∏—Ç —Ç–∞ –æ—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    loop = asyncio.get_event_loop()  # –û—Ç—Ä–∏–º—É—î–º–æ —Ü–∏–∫–ª –ø–æ–¥—ñ–π asyncio

    task1 = loop.create_task(
        conv.wait_event(events.CallbackQuery())
    )  # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ–¥—ñ—ó –∑ –∫–Ω–æ–ø–∫–æ—é
    task2 = loop.create_task(
        conv.get_response()
    )  # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

    done, _ = await asyncio.wait({task1, task2}, return_when=asyncio.FIRST_COMPLETED)  # –û—á—ñ–∫—É—î–º–æ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –±—É–¥—å-—è–∫–æ—ó –∑ –ø–æ–¥—ñ–π

    result = done.pop().result()  # –û—Ç—Ä–∏–º—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–µ—Ä—à–æ—ó –∑–∞–≤–µ—Ä—à–µ–Ω–æ—ó –ø–æ–¥—ñ—ó
    await message.delete()  # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

    if isinstance(result, events.CallbackQuery.Event):  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ –∫–Ω–æ–ø–∫—É –∑—É–ø–∏–Ω–∫–∏
        return None
    else:
        return result.message.strip()  # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞


@client.on(events.NewMessage(pattern="(?i)/start"))  # –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ /start
async def handle_start_command(event):

    SENDER = event.sender_id  # –û—Ç—Ä–∏–º—É—î–º–æ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ç–æ—Ä –≤—ñ–¥–ø—Ä–∞–≤–Ω–∏–∫–∞
    prompt = "üåü –ü—Ä–∏–≤—ñ—Ç, —è —Ç—É—Ç, —â–æ–± –æ—Å–≤—ñ—Ç–∏—Ç–∏ —Ç–≤—ñ–π –¥–µ–Ω—å –∑–Ω–∞–Ω–Ω—è–º–∏ —Ç–∞ –¥–æ–ø–æ–º–æ–≥–æ—é! üöÄ –Ø–∫—â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∞–±–æ —Ç–∏ –º–∞—î—à –∑–∞–ø–∏—Ç–∞–Ω–Ω—è, –ø—Ä–æ—Å—Ç–æ —Å–∫–∞–∂–∏ —Å–ª–æ–≤–æ, —ñ —è –ø–µ—Ä–µ—Ç–≤–æ—Ä—é —Ç–≤–æ—ó —Å—É–º–Ω—ñ–≤–∏ –Ω–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å! üí°" 
    try:
        await client.send_message(SENDER, prompt)  # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è

        async with client.conversation(await event.get_chat(), exclusive=True, timeout=10000) as conv:
            history = []  # –Ü—Å—Ç–æ—Ä—ñ—è —Ä–æ–∑–º–æ–≤–∏

            while True:
                prompt = "üì¨ –®–∞–Ω–æ–≤–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É, –±—É–¥–µ–º–æ –≤–¥—è—á–Ω—ñ –∑–∞ –≤–∞—à—ñ –¥—É–º–∫–∏ —Ç–∞ —ñ–¥–µ—ó –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è –Ω–∞—à–æ–≥–æ Telegram-ChatGPT-B–æ—Ç–∞. –í–∞—à –≤–Ω–µ—Å–æ–∫ —î —Ü—ñ–Ω–Ω–∏–º! ‚úçÔ∏è"
                user_input = await send_question_and_retrieve_result(prompt, conv, keyboard_stop)  # –û—Ç—Ä–∏–º—É—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
                
                if user_input is None:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏—Ä—ñ—à–∏–≤ –∑—É–ø–∏–Ω–∏—Ç–∏ —Ä–æ–∑–º–æ–≤—É
                    prompt = "‚ú® –í–∞—à –∑–∞–ø–∏—Ç –æ–±—Ä–æ–±–ª–µ–Ω–æ! –©–æ–± –ø–æ—á–∞—Ç–∏ –∑ —á–∏—Å—Ç–æ–≥–æ –∞—Ä–∫—É—à–∞, –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥—ñ—Ç—å /start. –ß–µ–∫–∞—î–º–æ –Ω–∞ –≤–∞—à—ñ –Ω–æ–≤—ñ —ñ–¥–µ—ó! üåü"
                    await client.send_message(SENDER, prompt)  # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑–º–æ–≤–∏
                    break
                else:
                    prompt = "‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ! –†–æ–∑–≥–ª—è–¥–∞—é –≤–∞—à–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —Ç–∞ —Å–∫–æ—Ä–æ –Ω–∞–¥–∞–º –≤—ñ–¥–ø–æ–≤—ñ–¥—å. ü§ì"
                    thinking_message = await client.send_message(SENDER, prompt)  # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É –∑–∞–ø–∏—Ç—É

                    history.append({"role":"user", "content": user_input})  # –î–æ–¥–∞—î–º–æ –≤–≤–µ–¥–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó

                    chat_completion = openai.ChatCompletion.create(
                        model=config.model_engine,
                        messages=history,
                        max_tokens=500,
                        n=1,
                        temperature=0.1
                    )  # –ó–∞–ø–∏—Ç –¥–æ OpenAI –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

                    response = chat_completion.choices[0].message.content  # –û—Ç—Ä–∏–º—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ OpenAI

                    history.append({"role": "assistant", "content": response})  # –î–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó

                    await thinking_message.delete()  # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ–±—Ä–æ–±–∫—É

                    await client.send_message(SENDER, response, parse_mode='Markdown')  # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É

    except openai.error.OpenAIError as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ API OpenAI: {e}")  # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ OpenAI
        await client.send_message(SENDER, "–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ API OpenAI. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –∑–Ω–æ–≤—É –ø—ñ–∑–Ω—ñ—à–µ.")

    except asyncio.TimeoutError:
        print("–ß–∞—Å —Ä–æ–∑–º–æ–≤–∏ –º–∏–Ω—É–≤")  # –û–±—Ä–æ–±–∫–∞ –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ —á–∞—Å —Ä–æ–∑–º–æ–≤–∏ –º–∏–Ω—É–≤
        await client.send_message(SENDER, "<b>–†–æ–∑–º–æ–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞‚úîÔ∏è</b>\n–ü—Ä–æ–π—à–ª–æ –∑–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ —á–∞—Å—É –∑ –º–æ–º–µ–Ω—Ç—É –≤–∞—à–æ—ó –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å /start, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É —Ä–æ–∑–º–æ–≤—É.", parse_mode='html')
        return

    except telethon.errors.common.AlreadyInConversationError:
        print("–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≤ —Ä–æ–∑–º–æ–≤—ñ")  # –û–±—Ä–æ–±–∫–∞ –≤–∏–ø–∞–¥–∫—É, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –≤ —Ä–æ–∑–º–æ–≤—ñ
        pass

    except Exception as e: 
        print(f"–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞: {e}")  # –û–±—Ä–æ–±–∫–∞ –∑–∞–≥–∞–ª—å–Ω–∏—Ö –ø–æ–º–∏–ª–æ–∫
        await client.send_message(SENDER, "<b>–†–æ–∑–º–æ–≤–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞‚úîÔ∏è</b>\n–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å /start, —â–æ–± —Ä–æ–∑–ø–æ—á–∞—Ç–∏ –Ω–æ–≤—É —Ä–æ–∑–º–æ–≤—É.", parse_mode='html')
        return

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ...")  # –í–∏–≤–æ–¥–∏–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    client.run_until_disconnected()  # –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞``